package com.sarrawi.mynokat.paging

//في كوتلن، تُستخدم الكلمة الرئيسية let للقيام بعدة أشياء مفيدة، خاصةً في سياق التعامل مع القيم التي قد تكون null. في الحالة التي عرضتها، يتم استخدام let لأسباب محددة:
//
//التحقق من القيم غير القابلة لـ null: let يسمح لك بالتحقق من أن القيمة ليست null قبل القيام بعمليات معينة عليها. في هذه الحالة، إذا كانت القيمة التي يُرجعها getItem(position) ليست null،
// فإن الكود داخل let سيتم تنفيذه.
//
//تبسيط الكود: استخدام let يجعل الكود أكثر نظافة وقراءة. بدلاً من استخدام شرط if للتأكد من أن القيمة ليست null ثم العمل على القيمة، يمكنك استخدام let بشكل مباشر لتجنب كتابة كود إضافي.
//
//في هذا المثال، إذا كانت القيمة التي تُرجعها getItem(position) غير null،
// فإن الكود داخل let سيقوم بتنفيذ مجموعة من العمليات، مثل استدعاء onbtnclick وتحديث حالة الزر بناءً على قيمة item.is_fav.

////////////
//let: يُستخدم عندما تحتاج إلى تنفيذ كتلة من الكود مع
// الكائن نفسه كمعامل في تلك الكتلة، ويكون الكائن غير null. القيمة المعادة من let هي القيمة التي تم تمريرها إلى let (في هذه الحالة، item).
//
//run: يُستخدم عندما تحتاج إلى تنفيذ كتلة من الكود مع الكائن نفسه كمعامل في تلك الكتلة، ولكن في حالة run
// ، يمكنك الوصول إلى الكائن الداخلي بدون استخدام اسم المتغير الذي قمت بتمريره، كما يمكنك تنفيذ كود يعتمد على قيمة هذا الكائن، ثم تُرجع قيمة جديدة.
/////////////////
//مثال باستخدام run
//في هذا المثال، نستخدم run لتنفيذ كتلة من الكود مع الكائن نفسه كمعامل، ونقوم بإرجاع قيمة جديدة:
//fun main() {
//    val item: String? = "Hello, Kotlin!"
//
//    val result = item?.run {
//        println("Item is not null: $this")
//        // هنا يمكنك استخدام `this` للإشارة إلى الكائن غير null
//        "Processed: $this"  // قيمة جديدة سيتم إرجاعها
//    }
//
//    println(result)  // سيطبع "Processed: Hello, Kotlin!"
//}

//////////////////
//مثال باستخدام let
//في هذا المثال، نستخدم let للتأكد من أن القيمة ليست null، ثم نقوم بتنفيذ بعض العمليات عليها:
//fun main() {
//    val item: String? = "Hello, Kotlin!"
//
//    item?.let { nonNullItem ->
//        println("Item is not null: $nonNullItem")
//        // يمكنك استخدام nonNullItem هنا، وهو قيمة غير null
//    }
//}

/////////////////////
//also
//تُستخدم also لتنفيذ بعض العمليات على الكائن دون تغيير الكائن نفسه، وتُرجع الكائن الأصلي.
// تُعتبر مفيدة عندما تريد تنفيذ عمليات جانبية مثل تسجيل معلومات أو تنبيه المستخدم ولكن لا تؤثر على الكائن.
//data class Person(var name: String, var age: Int)
//
//fun main() {
//    val person = Person("Alice", 25).also {
//        println("Before: ${it.name}, ${it.age}")
//        it.name = "Bob"
//        it.age = 30
//    }
//
//    println("After: ${person.name}, ${person.age}")  // سيطبع: After: Bob, 30
//}
///////////////////////
//مقارنة بين let, run, apply, و also
//let: يُستخدم للتعامل مع الكائن إذا كان غير null، ويُرجع القيمة التي تُعطى إلى let.
//
//run: يُستخدم لتشغيل كتلة من الكود مع الكائن، ويُرجع قيمة جديدة.
//
//apply: يُستخدم لتعديل خصائص الكائن وتُرجع الكائن نفسه.
//
//also: يُستخدم لتنفيذ عمليات جانبية على الكائن دون تعديل الكائن نفسه، وتُرجع الكائن الأصلي.
//https://chatgpt.com/share/b947efe6-f9dd-4881-b45a-f232fa4581cf